TODO: Create Terraform Main.tf to create test-nas from scratch with 6-8 disks, as I created new.  Have backup, but a fresh install would be good as well.


##### git workflor

# On Workstation A
git checkout main
git pull origin main
git checkout -b new-feature
# Work on your feature
git add .
git commit -m "Describe your changes"
git push origin new-feature

# On Workstation B
git fetch origin
git checkout new-feature
git pull origin new-feature
# Continue working on your feature

### when completed
git checkout main
git pull origin main
git merge new-feature
git push origin main


###### Progress #####
NAS TODO:
- Fork Ironic Badger snapraid role and take pull request for log file path
- Test ansible-galaxy-begone to manage requirements
DONE - remove gmail email from variable file and add to vault
- For Portainer to manage dockers on NAS - I needed to install the portainer agent, need to verify

PLEX TODO:
DONE - Add Node Exporter
- Determine if I want to add Plex-Exporter
- get Install from Plex Role working, after vacation
- Plex needs to be updated to Ubuntu 24 - could use this as a fresh install test + plex restore

DOCKER HOST TODO:
- explore docker_exporter for prometheus
- set up docker, and created portainer instance.  Working to get htat to manage nas containers

- TODO Setting Up Immich.  Created Virtual Drive for testing purposes.  Copying immich docker-compose file into ansible config

Notes: 10/16
- Have Immich container working.  Have it reading external library, tested photo upload.  Going to tets Nextcloud next.  Confirming if Nextcloud image upload is better, to keep all originals outside Immich.  Immich may just be a external library indexing app

- Getting Terraform Provider Back up and running to be able to create VMs via code, not manually

- Working on getting cloud init setup to avoid having to install.  Working on code in stage/nextcloud and what is listed in Amazon Q for actual VM configuration

10/24:

Got both packer and TF working.  Issue was keyboard layout in packer template.  And TF I need to specify the disks, the clone doesn't clone and attach disks properly without specifying them.  

10/29:

Got the install to run, but ngnix is not starting up.  Need to understand the setup for nextcloud and ngnix and review the ansible roles to see if it is working correctly.  I may want to redo the install manual, of just nextcloud, get it working, and back into the ansible variables.

11/12:

Seemingly got nextcloud running.  Had to update config.php, to add in IP address so the site would let me in (admin/charlie29).  Had to take ngnix conf file from the docs (https://docs.nextcloud.com/server/20/admin_manual/installation/nginx.html#nextcloud-in-a-subdir-of-the-nginx-webroot), change the paths for the certs, and ran open ssl commands to generate the certificates outlined on this blog (https://www.jeffgeerling.com/blog/2017/self-signed-certificates-ansible-local-testing-nginx)

So 
- Gen Certs
- Update ngnix config to tutorial and update certificate path
- Update config.php for IP address

Need to figure out why hostname isn't working, fix ansible code and run from scratch

Trying to rerun - changing IP on nextcloud to be in the fixed IP range.  Hostname issue could be due to dynamic ip. Need to get terraform code with static ip to work.  Gateway not getting set, so not showing up in DNS

Need to understand local DNS, with Tailscale - as this could be part of my issue

Next Steps:
1) need to go through TF code and add some conditionals to variables being passed in to add flexibility.  Also add conditionals for loops for adding disks.

2) Now I can create ansible code for installing next cloud, and figure out how to invoke that from the successful creation of TF module.

3) Want to be able to set cipassword but have it encrypter, Q example below:
variable "use_sops_secret" {
  type    = bool
  default = false
}

variable "cipassword" {
  type      = string
  sensitive = true
  default   = ""  # This will be used if not using SOPS
}

data "sops_file" "secrets" {
  source_file = "secrets.enc.yaml"
}

locals {
  cipassword = var.use_sops_secret ? data.sops_file.secrets.data["cipassword"] : var.cipassword
}

module "vm" {
  source     = "./path/to/vm/module"
  cipassword = local.cipassword
  # Other module arguments...
}

11/16: DNS Quest Resolved (pun intended)

For Static IP assignments not done through OPNSense GUI, you need to add a domain override in unbound. Will need to figure out how to manage this via ansible role in the future.

1/3/2024:

Changed Nextcloud variable to full hostname, and not I can get to login page on first attempt after a fresh install.

Went back to ngnix config file from ansible role example, minus the include statements.

#1 The new / latest problem is admin-charlie29 does not work to login...

#2 I also can not access via https

01/11 - GOing to try the AIO Docker container with Ironic Badger new Ansible Docker Role

::splashy whomever tint unfrosted anyhow steam entrust headache::

uid: admin
init password : 
::cba6b5b22dbeca19e8d395f04296a1a0025d3c1c41c89623::

clientID: kWYr5aDMra11CNTRL
clientSecret: tskey-client-kWYr5aDMra11CNTRL-qtmtPKEcGXPXECE7mW8jYPDFcFDLQviFa

authkey: tskey-auth-kASgp1xwrE11CNTRL-ZatafbkPDtRDjGh9YPBRsRdgnXMUFBTaU

container-authkey:
tskey-auth-kaL95Ej64Q11CNTRL-9yZJfUjvo4HwZ8dkUw1C8HRKAATYH1dd

Got AIO container working with compose file an tailsacle kinda working.  Can't do second login.

1/12:::: AHHHHHHHHH!!!H!H!H!H!H!H

In the mix with Q trying to get this to work.  Got the initial setup working. Got past the initial domain check, can't get a subsequent login to work.

2/2::

Redo Terraform for Proxmox to use bgp provider, seems more up to date and comprehensive

##### Maintenance Notes

### Complete Work
Users for Plex and NAS Working

Move to setting up Plex Server and aligning user ids across NAS & PLEX 


### PROXMOX ANSIBLE STEPS

1) Create cloud-init-ubuntu24.yml file in /var/lib/vz/template folder
2) Create users for terraform API

###  MAC DEV SETUP

1) brew install ansible
2) brew install sops
3) brew install age
export SOPS_AGE_KEY_FILE=/Users/pofo14/dev/IaC/terraform/key.txt


# created: 2024-10-16T21:42:20-04:00
# public key: age1d5eqgled05h4jgkfacvdamy7ys4hry740au8prqgvykx3l0apfzq85gr7y
AGE-SECRET-KEY-13UT4FLFME0076JMC8QH7X5ESQTRZFSFEYN53YZD5PX9EA8G5UDSQK7F298



###

Dashy backup id
nYDu-YnDd-eiSn-dnDe
pwd: backup


###### Terraform --> Static Host for Ansible #####
#TODO: Need to implement this functionality
# In your vm-clone-bgp/main.tf, add this at the end:

resource "local_file" "static_dns_entries" {
  count = var.ipaddress != "" ? 1 : 0  # Only create when static IP is used
  
  filename = "${path.root}/../ansible/inventory/group_vars/dns_servers/static_hosts.yml"
  
  content = yamlencode({
    static_hosts = flatten([
      data.yaml_list_of_strings.existing_hosts[0].output,
      {
        name = var.hostname
        ip   = split("/", var.ipaddress)[0]  # Remove CIDR notation
        domain = var.domain
      }
    ])
  })
}

# Read existing entries to preserve them
data "local_file" "existing_hosts" {
  count    = var.ipaddress != "" ? 1 : 0
  filename = "${path.root}/../ansible/inventory/group_vars/dns_servers/static_hosts.yml"

  # If file doesn't exist, create empty default
  default = yamlencode({
    static_hosts = []
  })
}

data "yaml_list_of_strings" "existing_hosts" {
  count = var.ipaddress != "" ? 1 : 0
  input = data.local_file.existing_hosts[0].content
}

# Example usage in your root terraform configuration
module "static_vm" {
  source = "./modules/vm-clone-bgp"
  
  hostname   = "webserver"
  ipaddress  = "192.168.1.50/24"
  domain     = "flopo.retropetro.net"
  # ... other variables ...
}

# Ensure the ansible directory exists
resource "local_file" "ensure_ansible_dir" {
  filename = "${path.root}/../ansible/inventory/group_vars/dns_servers/.keep"
  content  = ""

  provisioner "local-exec" {
    command = "mkdir -p ${path.root}/../ansible/inventory/group_vars/dns_servers"
  }
}

# versions.tf or main.tf
terraform {
  required_providers {
    proxmox = {
      source  = "bpg/proxmox"
      version = "0.70.1"
    }
    local = {
      source = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

To handle file permissions and ensure the directory exists:

# In your vm-clone-bgp/variables.tf
variable "ansible_dir" {
  description = "Path to Ansible inventory directory"
  type        = string
  default     = "../ansible/inventory"
}

# In main.tf
resource "local_file" "ensure_dirs" {
  count = var.ipaddress != "" ? 1 : 0
  
  filename = "${var.ansible_dir}/group_vars/dns_servers/.keep"
  content  = ""

  provisioner "local-exec" {
    command = "mkdir -p ${var.ansible_dir}/group_vars/dns_servers"
  }
}


########################### PVE1 Notes #################################
####### IOU3 - set to 4x4x4x4 bifurcation                    ###########
########################################################################