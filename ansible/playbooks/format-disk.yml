---
- name: Partition, format disks, and update host vars
  hosts: all
  become: true

  tasks:
    - name: Create GPT partition
      community.general.parted:
        device: "/dev/disk/by-id/{{ item }}"
        label: gpt
        number: 1
        state: present
      loop: "{{ new_disk_ids }}"

    - name: Create ext4 filesystem
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/disk/by-id/{{ item }}-part1"
      loop: "{{ new_disk_ids }}"
      register: format_result

    - name: Get UUID of formatted partitions
      ansible.builtin.command: blkid -s UUID -o value /dev/disk/by-id/{{ item }}-part1
      register: uuid_result
      loop: "{{ new_disk_ids }}"
      changed_when: false

    - name: Debug disk UUID
      ansible.builtin.debug:
        var: uuid_result

    - name: Prepare new_formatted_disks variable
      ansible.builtin.set_fact:
        new_formatted_disks: "{{ uuid_result.results | map(attribute='stdout') | list }}"

    - name: Display new_formatted_disks variable
      ansible.builtin.debug:
        var: new_formatted_disks

    - name: Update host_vars locally
      delegate_to: localhost
      become: false
      block:
        - name: Ensure host_vars directory exists
          ansible.builtin.file:
            path: "{{ playbook_dir }}/../host_vars"
            state: directory
            mode: '0755'

        - name: Read existing host_vars file
          ansible.builtin.slurp:
            src: "{{ playbook_dir }}/../host_vars/{{ inventory_hostname }}.yml"
          register: existing_host_vars
          ignore_errors: false

        - name: Parse existing formatted_disks
          ansible.builtin.set_fact:
            existing_formatted_disks: "{{ (existing_host_vars.content | b64decode | from_yaml).formatted_disks | default([]) }}"
          when: existing_host_vars is succeeded

        - name: Combine existing and new formatted_disks
          ansible.builtin.set_fact:
            combined_formatted_disks: "{{ (existing_formatted_disks | default([])) + new_formatted_disks | unique }}"

        - name: Read existing host_vars file
          ansible.builtin.slurp:
            src: "{{ playbook_dir }}/../host_vars/{{ inventory_hostname }}.yml"
          register: existing_host_vars
          ignore_errors: false

        - name: Parse existing host_vars
          ansible.builtin.set_fact:
            existing_vars: "{{ (existing_host_vars.content | b64decode | from_yaml) if existing_host_vars is succeeded else {} }}"

        - name: Update host_vars file
          ansible.builtin.copy:
            content: "{{ existing_vars | combine({'formatted_disks': combined_formatted_disks}) | to_nice_yaml }}"
            dest: "{{ playbook_dir }}/../host_vars/{{ inventory_hostname }}.yml"
            mode: "0600"

        - name: Check if host_vars file exists
          ansible.builtin.stat:
            path: "{{ playbook_dir }}/../host_vars/{{ inventory_hostname }}.yml"
          register: host_vars_file

        - name: Debug host_vars file existence
          ansible.builtin.debug:
            msg: "Host vars file exists: {{ host_vars_file.stat.exists }}"

        - name: Debug host_vars file content
          ansible.builtin.command: cat "{{ playbook_dir }}/../host_vars/{{ inventory_hostname }}.yml"
          register: host_vars_content
          changed_when: false
          when: host_vars_file.stat.exists

        - name: Display host_vars file content
          ansible.builtin.debug:
            var: host_vars_content.stdout_lines
          when: host_vars_file.stat.exists

    - name: Display updated formatted_disks
      ansible.builtin.debug:
        msg: "Formatted disks UUIDs: {{ combined_formatted_disks }}"
