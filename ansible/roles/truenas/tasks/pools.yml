---
- name: Get available disks via HTTP API
  ansible.builtin.uri:
    url: "https://{{ ansible_truenas_api_host }}/api/v2.0/disk"
    method: GET
    user: "{{ ansible_truenas_user | default(ansible_user) }}"
    password: "{{ ansible_truenas_password | default(ansible_password) }}"
    force_basic_auth: true
    validate_certs: false
    status_code: 200
    headers:
      Content-Type: "application/json"
  register: truenas_disks_api
  delegate_to: localhost
  
- name: Process disks from API
  ansible.builtin.set_fact:
    truenas_disks: "{{ truenas_disks_api.json }}"
    truenas_disks_by_serial: >-
      {% set disk_dict = {} %}
      {% for disk in truenas_disks_api.json %}
        {% if disk.serial is defined and disk.serial %}
          {% set _ = disk_dict.update({disk.serial: disk.name}) %}
        {% endif %}
      {% endfor %}
      {{ disk_dict }}
    truenas_disks_by_size: >-
      {% set disks_list = [] %}
      {% for disk in truenas_disks_api.json %}
        {% if disk.size is defined %}
          {% set disk_info = {'name': disk.name, 'size': disk.size, 'size_gb': (disk.size | int / 1000000000) | round | int} %}
          {% set _ = disks_list.append(disk_info) %}
        {% endif %}
      {% endfor %}
      {{ disks_list }}
  
- name: Display available disks with details
  ansible.builtin.debug:
    msg: |
      Available disks:
      {% for disk in truenas_disks %}
      - {{ disk.name }}: {{ (disk.size | default(0) | int / 1000000000) | round | int }}GB 
        ({{ disk.serial | default('No Serial') }}, {{ disk.model | default('No Model') }})
      {% endfor %}
      
      Raw API Response:
      {{ truenas_disks_api | to_nice_yaml }}
      
      Disks by serial:
      {{ truenas_disks_by_serial | to_nice_yaml }}
      
      Disks by size:
      {{ truenas_disks_by_size | to_nice_yaml }}
  when: truenas_debug | default(false) | bool

- name: Create ZFS pools via HTTP API
  ansible.builtin.uri:
    url: "https://{{ ansible_truenas_api_host }}/api/v2.0/pool"
    method: POST
    user: "{{ ansible_truenas_user | default(ansible_user) }}"
    password: "{{ ansible_truenas_password | default(ansible_password) }}"
    force_basic_auth: true
    validate_certs: false
    body_format: json
    status_code: [200, 201]
    body: "{{ {'name': item.name, 'topology': item.topology, 'encryption': item.encryption | default(false)} }}"
  register: truenas_pool_creation
  loop: "{{ truenas_pools | default([]) }}"
  when: truenas_pools is defined and truenas_pools | length > 0
  failed_when: false
  changed_when: truenas_pool_creation.status == 201
  delegate_to: localhost
